<?xml version="1.0" encoding="utf-8"?>
<package>
  <metadata>
    <id>aqlaserializer</id>
    <version>2.0.0.96</version>
    <authors>Vladyslav Taranov</authors>
    <copyright>Vladyslav Taranov 2016, fork source from Marc Gravell 2016</copyright>
    <owners>Vladyslav Taranov</owners>
    <summary>Fork of well known protobuf-net, contains improved API, reference tracking, list handling and multiple fixes. It's a binary serializer designed for serializing **objects** on a wide range of .NET platforms.</summary>
    <description>AqlaSerializer is intended to serialize objects, not just data. 

What the difference? Data serializers don't care much about language runtime specifics like references, inheritance, etc. In contrast, an object serializer should take such things into account.

AqlaSerializer primary goal is to support important .NET features like nested collections, multi-dimensional arrays, references, etc. And it still supports Google Protocol Buffers format.

Like protobuf-net AqlaSerializer makes possible to store objects as a small in size binary data (far smaller than xml). And it's more CPU effective than BinaryFormatter and other core .NET serializers (which could be unavailable on your target platform). Its format is designed to be: small in size - efficient data storage (far smaller than xml) cheap to process - both at the client and server platform independent - portable between different programming architectures extensible - to add new data to old messages.

The implementation is compatible with most of the .NET family, including .NET 2.0/3.0/3.5/4.0, Windows Phone 8, Silverlight, etc. The code is heavily based on Marc Gravell's protobuf-net but there are a lot of improvements and fixes.

The original protobuf-net project contains many "red" unit tests but I managed to fix a lot of them.

Some build configurations may be not available through nuget, you can download their binaries manually from github (use Project Site link).</description>
    <projectUrl>https://github.com/AqlaSolutions/AqlaSerializer</projectUrl>
    <licenseUrl>https://github.com/AqlaSolutions/AqlaSerializer/blob/master/Licence.txt</licenseUrl>
    <tags>binary serialization protocol buffers protobuf deserialization aqlaserializer aqla aqlasolutions</tags>
    <language>en-US</language>
    <releaseNotes>

* 2.0.0.96: V2 RC
- Google Protocol Buffers format support is back (I've reconsidered this) - (de)serialization.
- Nested collections.
- Multi-dimensional arrays.
- Improved reference tracking (e.g. surrogate fix and referencing arrays from inside themselves).
- Improved versioning (e.g. between reference-nonreference-null-nonnull-dynamic).
- Optimizations for better output size.
- Collection subtypes (will read subtype number to create correct concrete type).
- Array types may be registered as collections and use full set of features (null support, etc) even when passed as root objects.
- Primitive types are allowed to be set to fields marked as dynamic type.
- Reference serialization will avoid using too much recursion #1.
- Possibility to specify different attribute sets for different models (see ModelId property on attributes).
- Attributes to specify behavior on collection and collection elements (and nested) separately.
- Significant peformance improvements.

* 1.0.0.938:
- more effficient memory usage
- if writing stream CanSeek and CanRead the serializer may use it as a buffer when its own buffer grows too big

* 1.0.0.818: merged changes from the fork origin (except DNX)
* 1.0.0.793: fixed AsReferenceDefault correct usage for legacy protobuf-net attributes
* 1.0.0.776:
- fixed issue when surrogated value was not correctly reference tracked
- add method is recognized not only on IEnumerable&lt;T&gt; but also on its inheritors like IReadOnlyCollection&lt;T&gt;

* 1.0.0.767 - improvements in list handling, merged changes from original protobuf-net 

* 1.0.0.58 - initial AqlaSerializer release
    </releaseNotes>
  </metadata>
</package>