<?xml version="1.0"?>
<doc>
    <assembly>
        <name>aqlaserializer</name>
    </assembly>
    <members>
        <member name="T:AqlaSerializer.Meta.ProtoCompatibilitySettingsValue">
            <summary>
            Settings of a Google Protocol Buffers compatibility mode; mind that compatibility modes are not compatible between themselves so changing these settings will make you unable to read your previously written data
            </summary>
        </member>
        <member name="F:AqlaSerializer.Meta.ProtoCompatibilitySettingsValue.SuppressOwnRootFormat">
            <summary>
            Own root format is required for LateReference write mode
            </summary>
        </member>
        <member name="F:AqlaSerializer.Meta.ProtoCompatibilitySettingsValue.SuppressValueEnhancedFormat">
            <summary>
            Enhanced value format is necessary for null handling and reference tracking
            </summary>
        </member>
        <member name="F:AqlaSerializer.Meta.ProtoCompatibilitySettingsValue.SuppressCollectionEnhancedFormat">
            <summary>
            See <see cref="T:AqlaSerializer.CollectionFormat"/>
            </summary>
        </member>
        <member name="F:AqlaSerializer.Meta.ProtoCompatibilitySettingsValue.SuppressNullWireType">
            <summary>
            Null wire type allows to write null values in a more compact way but it doesn't present in the official documentation of Protocol Buffers format so it can't be read by most serializers
            </summary>
        </member>
        <member name="T:AqlaSerializer.Meta.TypeFormatEventArgs">
            <summary>
            Event arguments needed to perform type-formatting functions; this could be resolving a Type to a string suitable for serialization, or could
            be requesting a Type from a string. If no changes are made, a default implementation will be used (from the assembly-qualified names).
            </summary>
        </member>
        <member name="P:AqlaSerializer.Meta.TypeFormatEventArgs.Type">
            <summary>
            The type involved in this map; if this is initially null, a Type is expected to be provided for the string in FormattedName.
            </summary>
        </member>
        <member name="P:AqlaSerializer.Meta.TypeFormatEventArgs.FormattedName">
            <summary>
            The formatted-name involved in this map; if this is initially null, a formatted-name is expected from the type in Type.
            </summary>
        </member>
        <member name="T:AqlaSerializer.Meta.TypeFormatEventHandler">
            <summary>
            Delegate type used to perform type-formatting functions; the sender originates as the type-model.
            </summary>
        </member>
        <member name="T:AqlaSerializer.Meta.TypeModel">
            <summary>
            Provides protobuf serialization support for a number of types
            </summary>
        </member>
        <member name="P:AqlaSerializer.Meta.TypeModel.AllowStreamRewriting">
            <summary>
            When you pass stream which CanSeek and CanRead the serializer may use it as a buffer when its own buffer grows too big. Default: true.
            </summary>
        </member>
        <member name="P:AqlaSerializer.Meta.TypeModel.AllowReferenceVersioningSeeking">
            <summary>
            Disabling it will improve read performance but may cause exceptions when during deserialization a reference to removed reference-tracked property found. Requires own root format.
            </summary>
        </member>
        <member name="P:AqlaSerializer.Meta.TypeModel.ReferenceVersioningSeekingObjectsPredictedSize">
            <summary>
            Max count for list for <see cref="P:AqlaSerializer.Meta.TypeModel.AllowReferenceVersioningSeeking"/>
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.SerializeDateTimeKind">
            <summary>
            Should the <c>Kind</c> be included on date/time values?
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.MapType(System.Type)">
            <summary>
            Resolve a System.Type to the compiler-specific type
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.MapType(System.Type,System.Boolean)">
            <summary>
            Resolve a System.Type to the compiler-specific type
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.TrySerializeAuxiliaryType(AqlaSerializer.ProtoWriter,System.Type,AqlaSerializer.BinaryDataFormat,System.Int32,System.Object,System.Boolean,System.Boolean)">
            <summary>
            This is the more "complete" version of Serialize, which handles single instances of mapped types.
            The value is written as a complete field, including field-header and (for sub-objects) a
            length-prefix
            In addition to that, this provides support for:
             - basic values; individual int / string / Guid / etc
             - IEnumerable sequences of any type handled by TrySerializeAuxiliaryType
             
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
            <param name="value">The existing instance to be serialized (cannot be null).</param>
            <param name="dest">The destination stream to write to.</param>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.Serialize(System.IO.Stream,System.Object,AqlaSerializer.SerializationContext)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
            <param name="value">The existing instance to be serialized (cannot be null).</param>
            <param name="dest">The destination stream to write to.</param>
            <param name="context">Additional information about this serialization operation.</param>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.Serialize(AqlaSerializer.ProtoWriter,System.Object)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied writer.
            </summary>
            <param name="value">The existing instance to be serialized (cannot be null).</param>
            <param name="dest">The destination writer to write to.</param>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.DeserializeWithLengthPrefix``1(System.IO.Stream,``0,AqlaSerializer.PrefixStyle,System.Int32)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,AqlaSerializer.PrefixStyle,System.Int32)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
            <param name="type">The type being merged.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,AqlaSerializer.PrefixStyle,System.Int32,AqlaSerializer.SerializationContext)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
            <param name="type">The type being merged.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
            <param name="context"></param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,AqlaSerializer.PrefixStyle,System.Int32,AqlaSerializer.Serializer.TypeResolver)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
            <param name="type">The type being merged.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="expectedField">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
            <param name="resolver">Used to resolve types on a per-field basis.</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,AqlaSerializer.PrefixStyle,System.Int32,AqlaSerializer.Serializer.TypeResolver,System.Int32@)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
            <param name="type">The type being merged.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="expectedField">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
            <param name="resolver">Used to resolve types on a per-field basis.</param>
            <param name="bytesRead">Returns the number of bytes consumed by this operation (includes length-prefix overheads and any skipped data).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.DeserializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,AqlaSerializer.PrefixStyle,System.Int32,AqlaSerializer.Serializer.TypeResolver,System.Int32@,System.Boolean@,AqlaSerializer.SerializationContext)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed
            data - useful with network IO.
            </summary>
            <param name="type">The type being merged.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="expectedField">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
            <param name="resolver">Used to resolve types on a per-field basis.</param>
            <param name="bytesRead">Returns the number of bytes consumed by this operation (includes length-prefix overheads and any skipped data).</param>
            <param name="haveObject"></param>
            <param name="context"></param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.DeserializeItems(System.IO.Stream,System.Type,AqlaSerializer.PrefixStyle,System.Int32,AqlaSerializer.Serializer.TypeResolver)">
            <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:AqlaSerializer.Serializer.ListItemTag"/> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
            <param name="source">The binary stream containing the serialized records.</param>
            <param name="style">The prefix style used in the data.</param>
            <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
            <param name="resolver">On a field-by-field basis, the type of object to deserialize (can be null if "type" is specified). </param>
            <param name="type">The type of object to deserialize (can be null if "resolver" is specified).</param>
            <returns>The sequence of deserialized objects.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.DeserializeItems(System.IO.Stream,System.Type,AqlaSerializer.PrefixStyle,System.Int32,AqlaSerializer.Serializer.TypeResolver,AqlaSerializer.SerializationContext)">
            <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:AqlaSerializer.Serializer.ListItemTag"/> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
            <param name="source">The binary stream containing the serialized records.</param>
            <param name="style">The prefix style used in the data.</param>
            <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
            <param name="resolver">On a field-by-field basis, the type of object to deserialize (can be null if "type" is specified). </param>
            <param name="type">The type of object to deserialize (can be null if "resolver" is specified).</param>
            <returns>The sequence of deserialized objects.</returns>
            <param name="context">Additional information about this serialization operation.</param>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.DeserializeItems``1(System.IO.Stream,AqlaSerializer.PrefixStyle,System.Int32)">
            <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:AqlaSerializer.Serializer.ListItemTag"/> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="source">The binary stream containing the serialized records.</param>
            <param name="style">The prefix style used in the data.</param>
            <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
            <returns>The sequence of deserialized objects.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.DeserializeItems``1(System.IO.Stream,AqlaSerializer.PrefixStyle,System.Int32,AqlaSerializer.SerializationContext)">
            <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using
            either base-128 or fixed-length prefixes. Base-128 prefixes with a tag
            are directly comparable to serializing multiple items in succession
            (use the <see cref="F:AqlaSerializer.Serializer.ListItemTag"/> tag to emulate the implicit behavior
            when serializing a list/array). When a tag is
            specified, any records with different tags are silently omitted. The
            tag is ignored. The tag is ignores for fixed-length prefixes.
            </summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="source">The binary stream containing the serialized records.</param>
            <param name="style">The prefix style used in the data.</param>
            <param name="expectedField">The tag of records to return (if non-positive, then no tag is
            expected and all records are returned).</param>
            <returns>The sequence of deserialized objects.</returns>
            <param name="context">Additional information about this serialization operation.</param>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.SerializeWithLengthPrefix``1(System.IO.Stream,``0,AqlaSerializer.PrefixStyle,System.Int32)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
            <param name="value">The existing instance to be serialized (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="dest">The destination stream to write to.</param>
            <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.SerializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,AqlaSerializer.PrefixStyle,System.Int32)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
            <param name="type">The type being serialized.</param>
            <param name="value">The existing instance to be serialized (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="dest">The destination stream to write to.</param>
            <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.SerializeWithLengthPrefix(System.IO.Stream,System.Object,System.Type,AqlaSerializer.PrefixStyle,System.Int32,AqlaSerializer.SerializationContext)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream,
            with a length-prefix. This is useful for socket programming,
            as DeserializeWithLengthPrefix can be used to read the single object back
            from an ongoing stream.
            </summary>
            <param name="type">The type being serialized.</param>
            <param name="value">The existing instance to be serialized (cannot be null).</param>
            <param name="style">How to encode the length prefix.</param>
            <param name="dest">The destination stream to write to.</param>
            <param name="fieldNumber">The tag used as a prefix to each record (only used with base-128 style prefixes).</param>
            <param name="context">Additional information about this serialization operation.</param>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.Deserialize``1(System.IO.Stream)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.Deserialize``1(System.IO.Stream,``0)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
            <param name="type">The type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type,AqlaSerializer.SerializationContext)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
            <param name="type">The type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
            <param name="context">Additional information about this serialization operation.</param>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type,System.Int32)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
            <param name="type">The type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="length">The number of bytes to consume.</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.Deserialize(System.IO.Stream,System.Object,System.Type,System.Int32,AqlaSerializer.SerializationContext)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
            <param name="type">The type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="length">The number of bytes to consume (or -1 to read to the end of the stream).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
            <param name="context">Additional information about this serialization operation.</param>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.Deserialize(AqlaSerializer.ProtoReader,System.Object,System.Type)">
            <summary>
            Applies a protocol-buffer reader to an existing instance (which may be null).
            </summary>
            <param name="type">The type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The reader to apply to the instance (cannot be null).</param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.TryDeserializeAuxiliaryType(AqlaSerializer.ProtoReader,AqlaSerializer.BinaryDataFormat,System.Int32,System.Type,System.Object@,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This is the more "complete" version of Deserialize, which handles single instances of mapped types.
            The value is read as a complete field, including field-header and (for sub-objects) a
            length-prefix..kmc  
            
            In addition to that, this provides support for:
             - basic values; individual int / string / Guid / etc
             - IList sets of any type handled by TryDeserializeAuxiliaryType
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.ResolveProxies(System.Type)">
            <summary>
            Applies common proxy scenarios, resolving the actual type to consider
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.IsDefined(System.Type)">
            <summary>
            Indicates whether the supplied type is explicitly modelled by the model
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.GetKey(System.Type@)">
            <summary>
            Provides the key that represents a given type in the current model.
            The type is also normalized for proxies at the same time.
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.GetKeyImpl(System.Type)">
            <summary>
            Provides the key that represents a given type in the current model.
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.Serialize(System.Int32,System.Object,AqlaSerializer.ProtoWriter,System.Boolean)">
            <summary>
            Writes a protocol-buffer representation of the given instance to the supplied stream.
            </summary>
            <param name="key">Represents the type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be serialized (cannot be null).</param>
            <param name="dest">The destination stream to write to.</param>
            <param name="isRoot"></param>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.Deserialize(System.Int32,System.Object,AqlaSerializer.ProtoReader,System.Boolean)">
            <summary>
            Applies a protocol-buffer stream to an existing instance (which may be null).
            </summary>
            <param name="key">Represents the type (including inheritance) to consider.</param>
            <param name="value">The existing instance to be modified (can be null).</param>
            <param name="source">The binary stream to apply to the instance (cannot be null).</param>
            <param name="isRoot"></param>
            <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
        </member>
        <member name="T:AqlaSerializer.Meta.TypeModel.CallbackType">
            <summary>
            Indicates the type of callback to be used
            </summary>
        </member>
        <member name="F:AqlaSerializer.Meta.TypeModel.CallbackType.BeforeSerialize">
            <summary>
            Invoked before an object is serialized
            </summary>
        </member>
        <member name="F:AqlaSerializer.Meta.TypeModel.CallbackType.AfterSerialize">
            <summary>
            Invoked after an object is serialized
            </summary>
        </member>
        <member name="F:AqlaSerializer.Meta.TypeModel.CallbackType.BeforeDeserialize">
            <summary>
            Invoked before an object is deserialized (or when a new instance is created)
            </summary>            
        </member>
        <member name="F:AqlaSerializer.Meta.TypeModel.CallbackType.AfterDeserialize">
            <summary>
            Invoked after an object is deserialized
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.DeepClone``1(``0)">
            <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.DeepClone(System.Object)">
            <summary>
            Create a deep clone of the supplied instance; any sub-items are also cloned.
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.ThrowUnexpectedSubtype(System.Type,System.Type)">
            <summary>
            Indicates that while an inheritance tree exists, the exact type encountered was not
            specified in that hierarchy and cannot be processed.
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.ThrowUnexpectedType(System.Type)">
            <summary>
            Indicates that the given type was not expected, and cannot be processed.
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.ThrowCannotCreateInstance(System.Type)">
            <summary>
            Indicates that the given type cannot be constructed; it may still be possible to 
            deserialize into existing instances.
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.CanSerializeContractType(System.Type)">
            <summary>
            Returns true if the type supplied is either a recognised contract type,
            or a *list* of a recognised contract type. 
            </summary>
            <remarks>Note that primitives always return false, even though the engine
            will, if forced, try to serialize such</remarks>
            <returns>True if this type is recognised as a serializable entity, else false</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.CanSerialize(System.Type)">
            <summary>
            Returns true if the type supplied is a basic type with inbuilt handling,
            a recognised contract type, or a *list* of a basic / contract type. 
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.CanSerializeBasicType(System.Type)">
            <summary>
            Returns true if the type supplied is a basic type with inbuilt handling,
            or a *list* of a basic type with inbuilt handling
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.GetSchema(System.Type)">
            <summary>
            Suggest a .proto definition for the given type
            </summary>
            <param name="type">The type to generate a .proto definition for, or <c>null</c> to generate a .proto that represents the entire model</param>
            <returns>The .proto definition as a string</returns>
        </member>
        <member name="E:AqlaSerializer.Meta.TypeModel.DynamicTypeFormatting">
            <summary>
            Used to provide custom services for writing and parsing type names when using dynamic types. Both parsing and formatting
            are provided on a single API as it is essential that both are mapped identically at all times.
            </summary>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.ChangeType``2(``0)">
            <summary>
            Serializes a given instance and deserializes it as a different type;
            this can be used to translate between wire-compatible objects (where
            two .NET types represent the same data), or to promote/demote a type
            through an inheritance hierarchy.
            </summary>
            <remarks>No assumption of compatibility is made between the types.</remarks>
            <typeparam name="TFrom">The type of the object being copied.</typeparam>
            <typeparam name="TTo">The type of the new object to be created.</typeparam>
            <param name="instance">The existing instance to use as a template.</param>
            <returns>A new instane of type TNewType, with the data from TOldType.</returns>
        </member>
        <member name="M:AqlaSerializer.Meta.TypeModel.ChangeType(System.Object,System.Type)">
            <summary>
            Serializes a given instance and deserializes it as a different type;
            this can be used to translate between wire-compatible objects (where
            two .NET types represent the same data), or to promote/demote a type
            through an inheritance hierarchy.
            </summary>
            <remarks>No assumption of compatibility is made between the types.</remarks>
            <param name="to">The type of the new object to be created.</param>
            <param name="instance">The existing instance to use as a template.</param>
            <returns>A new instane of type TNewType, with the data from TOldType.</returns>
        </member>
        <member name="T:AqlaSerializer.BeforeSerializationCallbackAttribute">
            <summary>Specifies a method on the root-contract in an hierarchy to be invoked before serialization.</summary>
        </member>
        <member name="T:AqlaSerializer.AfterSerializationCallbackAttribute">
            <summary>Specifies a method on the root-contract in an hierarchy to be invoked after serialization.</summary>
        </member>
        <member name="T:AqlaSerializer.BeforeDeserializationCallbackAttribute">
            <summary>Specifies a method on the root-contract in an hierarchy to be invoked before deserialization.</summary>
        </member>
        <member name="T:AqlaSerializer.AfterDeserializationCallbackAttribute">
            <summary>Specifies a method on the root-contract in an hierarchy to be invoked after deserialization.</summary>
        </member>
        <member name="T:AqlaSerializer.CollectionFormat">
            <summary>
            Used to specify collection member format which affects supported scenarios
            </summary>
        </member>
        <member name="F:AqlaSerializer.CollectionFormat.NotSpecified">
            <summary>
            Peek format based on member type and <see cref="!:RuntimeTypeModel"/> settings.
            </summary>
        </member>
        <member name="F:AqlaSerializer.CollectionFormat.Protobuf">
            <summary>
            Doesn't support some scenarios, use only for compatibility with Google Protocol Buffers. Versioning won't support switching to other formats. 
            </summary>
            <remarks>
            Writes in packed encoding when appropriate which can save lots of space for repeated primitive values but only applies 
            to list/array data of primitive types (int, double, etc). 
            </remarks>
        </member>
        <member name="F:AqlaSerializer.CollectionFormat.ProtobufNotPacked">
            <summary>
            The same as <see cref="F:AqlaSerializer.CollectionFormat.Protobuf"/> but less size efficient for primitive types (int, double, etc), use only for compatibility reasons. Versioning won't support switching to others formats. 
            </summary>
            <remarks>The reason why it's not on property is because I want to underline that it's a different non-compatible format.</remarks>
        </member>
        <member name="F:AqlaSerializer.CollectionFormat.Enhanced">
            <summary>
            Recommended: stores list subtype information, differs null/empty state, allows referencing array from inside itself. Versioning won't support switching to other formats.
            </summary>
        </member>
        <member name="T:AqlaSerializer.EnumSerializableValueAttribute">
            <summary>
            Used to define protocol-buffer specific behavior for
            enumerated values.
            </summary>
        </member>
        <member name="P:AqlaSerializer.EnumSerializableValueAttribute.Value">
            <summary>
            Gets or sets the specific value to use for this enum during serialization.
            </summary>
        </member>
        <member name="T:AqlaSerializer.NonSerializableMemberAttribute">
            <summary>
            Indicates that a member should be excluded from serialization; this
            is only normally used when using implict fields.
            </summary>
        </member>
        <member name="T:AqlaSerializer.PartialNonSerializableMemberAttribute">
            <summary>
            Indicates that a member should be excluded from serialization; this
            is only normally used when using implict fields. This allows
            ProtoIgnoreAttribute usage
            even for partial classes where the individual members are not
            under direct control.
            </summary>
        </member>
        <member name="M:AqlaSerializer.PartialNonSerializableMemberAttribute.#ctor(System.String)">
            <summary>
            Creates a new ProtoPartialIgnoreAttribute instance.
            </summary>
            <param name="memberName">Specifies the member to be ignored.</param>
        </member>
        <member name="P:AqlaSerializer.PartialNonSerializableMemberAttribute.MemberName">
            <summary>
            The name of the member to be ignored.
            </summary>
        </member>
        <member name="T:AqlaSerializer.SerializableMemberAttribute">
            <summary>
            Declares a member to be used in protocol-buffer serialization, using
            the given Tag. A DataFormat may be used to optimise the serialization
            format (for instance, using zigzag encoding for negative numbers, or 
            fixed-length encoding for large values.
            </summary>
        </member>
        <member name="M:AqlaSerializer.SerializableMemberAttribute.#ctor(System.Int32,AqlaSerializer.ValueFormat)">
            <summary>
            Creates a new ProtoMemberAttribute instance.
            </summary>
            <param name="tag">Specifies the unique tag used to identify this member within the type.</param>
        </member>
        <member name="P:AqlaSerializer.SerializableMemberAttribute.Name">
            <summary>
            Gets or sets the original name defined in the .proto; not used
            during serialization.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableMemberAttribute.Tag">
            <summary>
            Gets the unique tag used to identify this member within the type.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableMemberAttribute.IsRequiredInSchema">
            <summary>
            Gets or sets a value indicating whether this member should be considered not optional when generating Protocol Buffers schema.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableMemberAttribute.DefaultValue">
            <summary>
            Default value will be skipped when writing; null means not specified.
            </summary>
        </member>
        <member name="T:AqlaSerializer.SerializablePartialMemberAttribute">
            <summary>
            Declares a member to be used in protocol-buffer serialization, using
            the given Tag and MemberName. This allows ProtoBuf.ProtoMemberAttribute usage
            even for partial classes where the individual members are not
            under direct control.
            A DataFormat may be used to optimise the serialization
            format (for instance, using zigzag encoding for negative numbers, or 
            fixed-length encoding for large values.
            </summary>
        </member>
        <member name="M:AqlaSerializer.SerializablePartialMemberAttribute.#ctor(System.Int32,System.String,AqlaSerializer.ValueFormat)">
            <summary>
            Creates a new ProtoMemberAttribute instance.
            </summary>
            <param name="tag">Specifies the unique tag used to identify this member within the type.</param>
            <param name="memberName">Specifies the member to be serialized.</param>
        </member>
        <member name="P:AqlaSerializer.SerializablePartialMemberAttribute.MemberName">
            <summary>
            The name of the member to be serialized.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableMemberAttributeBase.ModelId">
            <summary>
            Allows to use multiple attributes with different settings for each model
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableMemberAttributeBase.DynamicType">
            <summary>
            Embeds the type information into the stream, allowing usage with types not known in advance. Is not supported in LateReference mode.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableMemberAttributeBase.Format">
            <summary>
            Used to specify member format which affects supported features and output size
            </summary>
            <remarks>
            <para>default - null: <br/>
            Peek format based on member type and <see cref="!:RuntimeTypeModel"/> settings. Will try to choose Enhanced when its settings are enabled.
            </para>
            <para>false: <br/>
            Write and read as plain field without advanced features. <br/>
            Versioning won't support switching to <see cref="!:Enhanced"/> format. <br/>
            Not supported settings will be ignored.
            </para>
            <para>true: <br/>
            Use reference and null support if applicable. Versioning won't support switching to <see cref="!:Compact"/> format.<br/>
            Supports <see cref="!:SerializableMemberAttribute.DynamicType"/>. <br/>
            Not supported settings will be ignored.</para>
            The reason why DynamicType is on properties is because it's considered of the same EnhancedMode.Reference format.
            </remarks>
        </member>
        <member name="P:AqlaSerializer.SerializableMemberAttributeBase.CollectionConcreteType">
            <summary>
            Default collection implementation
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableMemberAttributeBase.ContentBinaryFormatHint">
            <summary>
            The data-format to be used when encoding this value.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableMemberAttributeBase.CollectionFormat">
            <summary>
            Supported collection features
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableMemberAttributeBase.CollectionItemType">
            <summary>
            The type of object for each item in the list (especially useful with ArrayList)
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableMemberAttributeBase.CollectionAppend">
            <summary>
            Indicates whether this field should *append* to existing values (the default is true, meaning *replace*).
            This option only applies to list/array data.
            </summary>
        </member>
        <member name="T:AqlaSerializer.SerializableTypeAttribute">
            <summary>
            Indicates that a type is defined for protocol-buffer serialization. Settings specified here are inherited by members of this type if not explicitely specified for them.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.ModelId">
            <summary>
            Allows to use multiple attributes with different settings for each model
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.Name">
            <summary>
            Gets or sets the defined name of the type.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.EnumPassthru">
            <summary>
            Applies only to enums (not to DTO classes themselves); gets or sets a value indicating that an enum should be treated directly as an int/short/etc, rather
            than enforcing .proto enum rules. This is useful *in particul* for [Flags] enums.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.SkipConstructor">
            <summary>
            If true, the constructor for the type is bypassed during deserialization, meaning any field initializers
            or other initialization code is skipped. 
            This settings can't be controlled per member.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.PrefixLength">
            <summary>
            Indicates whether the value should be prefixed with length instead of using StartGroup-EndGroup tags. If set to true makes skipping removed field faster when deserializing but slows down writing.
            This settings can't be controlled per member.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.ConstructType">
            <summary>
            The concrete type to create when a new instance of this type is needed; this may be useful when dealing
            with dynamic proxies, or with interface-based APIs; for collections this is a default collection type.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.DefaultEnhancedFormat">
            <summary>
            Supported features; this settings is used only for members; serialization of root type itself is controlled by RuntimeTypeModel. See <see cref="P:AqlaSerializer.SerializableMemberAttributeBase.Format"/>
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.ContentBinaryFormatHint">
            <summary>
            The data-format to be used when encoding this value.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.CollectionFormat">
            <summary>
            Supported collection features
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.CollectionItemType">
            <summary>
            The type of object for each item in the list (especially useful with ArrayList)
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.IgnoreListHandling">
            <summary>
            If specified, do NOT treat this type as a list, even if it looks like one.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.ImplicitFirstTag">
            <summary>
            Gets or sets the fist offset to use with implicit field tags;
            only uesd if ImplicitFields is set.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.UseAqlaMembersOnly">
            <summary>
            If specified, alternative contract markers (such as markers for XmlSerailizer or DataContractSerializer) are ignored.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.ImplicitFields">
            <summary>
            Gets or sets the mechanism used to automatically infer field tags
            for members. This option should be used in advanced scenarios only.
            Please review the important notes against the ImplicitFields enumeration.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.ImplicitOnlyWriteable">
            <summary>
            Implicit public property is added only when both get and set accessors are present and public; implicit private property is added only when both get and set accessors are present.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.InferTagFromName">
            <summary>
            Enables/disables automatic tag generation based on the existing name / order
            of the defined members. This option is not used for members marked
            with ProtoMemberAttribute, as intended to provide compatibility with
            WCF serialization. WARNING: when adding new fields you must take
            care to increase the Order for new elements, otherwise data corruption
            may occur.
            </summary>
            <remarks>If not explicitly specified, the default is assumed from Serializer.GlobalOptions.InferTagFromName.</remarks>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.InferTagFromNameHasValue">
            <summary>
            Has a InferTagFromName value been explicitly set? if not, the default from the type-model is assumed.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializableTypeAttribute.DataMemberOffset">
            <summary>
            Specifies an offset to apply to [DataMember(Order=...)] markers;
            this is useful when working with mex-generated classes that have
            a different origin (usually 1 vs 0) than the original data-contract.
            
            This value is added to the Order of each member.
            </summary>
        </member>
        <member name="T:AqlaSerializer.SerializeDerivedTypeAttribute">
            <summary>
            Indicates the known-types to support for an individual
            message. This serializes each level in the hierarchy as
            a nested message to retain wire-compatibility with
            other protocol-buffer implementations.
            </summary>
        </member>
        <member name="M:AqlaSerializer.SerializeDerivedTypeAttribute.#ctor(System.Int32,System.Type)">
            <summary>
             Creates a new instance of the ProtoIncludeAttribute.
             </summary>
             <param name="tag">The unique index (within the type) that will identify this data.</param>
             <param name="knownType">The additional type to serialize/deserialize.</param>
        </member>
        <member name="M:AqlaSerializer.SerializeDerivedTypeAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new instance of the ProtoIncludeAttribute.
            </summary>
            <param name="tag">The unique index (within the type) that will identify this data.</param>
            <param name="knownTypeName">The additional type to serialize/deserialize.</param>
        </member>
        <member name="P:AqlaSerializer.SerializeDerivedTypeAttribute.Tag">
            <summary>
            Gets the unique index (within the type) that will identify this data.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializeDerivedTypeAttribute.KnownTypeName">
            <summary>
            Gets the additional type to serialize/deserialize.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializeDerivedTypeAttribute.KnownType">
            <summary>
            Gets the additional type to serialize/deserialize.
            </summary>
        </member>
        <member name="F:AqlaSerializer.Settings.CollectionSettingsValue.ConcreteType">
            <summary>
            For abstract types (IList etc), the type of concrete object to create (if required). Ignored for not collections. Has value if != null.
            </summary>
        </member>
        <member name="F:AqlaSerializer.Settings.CollectionSettingsValue.Format">
            <summary>
            Has value if != NotSpecified
            </summary>
        </member>
        <member name="F:AqlaSerializer.Settings.CollectionSettingsValue.ItemType">
            <summary>
            Within a list / array / etc, the type of object for each item in the list (especially useful with ArrayList).
            Has value if != null.
            </summary>
        </member>
        <member name="F:AqlaSerializer.Settings.CollectionSettingsValue.PackedWireTypeForRead">
            <summary>
            Has value if != null
            </summary>
        </member>
        <member name="F:AqlaSerializer.Settings.CollectionSettingsValue.Append">
            /// <summary>
            Indicates whether this field should *repace* existing values (the default is false, meaning *append*).
            This option only applies to list/array data.
            Has value if != null
            </summary>
        </member>
        <member name="P:AqlaSerializer.Settings.CollectionSettingsValue.IsCollection">
            <summary>
            Returns true if ItemType != null, otherwise false
            </summary>
        </member>
        <member name="F:AqlaSerializer.Settings.MemberLevelSettingsValue.Format">
            <summary>
            Has value if != NotSpecified
            </summary>
        </member>
        <member name="F:AqlaSerializer.Settings.MemberLevelSettingsValue.WriteAsDynamicType">
            <summary>
            Embeds the type information into the stream, allowing usage with types not known in advance.
            Has value if != null.
            </summary>
        </member>
        <member name="F:AqlaSerializer.Settings.MemberLevelSettingsValue.ContentBinaryFormatHint">
            <summary>
            Specifies the rules used to process the field; this is used to determine the most appropriate
            wite-type, but also to describe subtypes <i>within</i> that wire-type (such as SignedVariant).
            Has value if != null.
            </summary>
        </member>
        <member name="F:AqlaSerializer.Settings.TypeSettingsValue.ConstructType">
            <summary>
            Also set Member.Collection.ConcreteType
            </summary>
        </member>
        <member name="T:AqlaSerializer.SurrogateConverterAttribute">
            <summary>
            Indicates that a static member should be considered the same as though
            were an implicit / explicit conversion operator; in particular, this
            is useful for conversions that operator syntax does not allow, such as
            to/from interface types.
            </summary>
        </member>
        <member name="F:AqlaSerializer.ValueFormat.NotSpecified">
            <summary>
            Peek format based on member type and <see cref="!:RuntimeTypeModel"/> settings
            </summary>
        </member>
        <member name="F:AqlaSerializer.ValueFormat.MinimalEnhancement">
            <summary>
            Has null support if appropriate but no reference tracking. Can deserialize data stored using <see cref="F:AqlaSerializer.ValueFormat.Reference"/> or <see cref="F:AqlaSerializer.ValueFormat.LateReference"/> formats. Not compatible with <see cref="F:AqlaSerializer.ValueFormat.Compact"/>.
            </summary>
        </member>
        <member name="F:AqlaSerializer.ValueFormat.Reference">
            <summary>
            Standard mode for reference types, includes and compatible with <see cref="F:AqlaSerializer.ValueFormat.MinimalEnhancement"/>.
            </summary>
        </member>
        <member name="F:AqlaSerializer.ValueFormat.LateReference">
            <summary>
            Indicates that the value should not be traversed recursively, includes and compatible with <see cref="F:AqlaSerializer.ValueFormat.Reference"/>.
            </summary>
        </member>
        <member name="F:AqlaSerializer.ValueFormat.Compact">
            <summary>
            Use compact format, compatible with Google Protocol Buffers, NOT compatible with <see cref="F:AqlaSerializer.ValueFormat.MinimalEnhancement"/>, <see cref="F:AqlaSerializer.ValueFormat.Reference"/>, <see cref="F:AqlaSerializer.ValueFormat.LateReference"/>.
            </summary>
        </member>
        <member name="T:AqlaSerializer.BclHelpers">
            <summary>
            Provides support for common .NET types that do not have a direct representation
            in protobuf, using the definitions from bcl.proto
            </summary>
        </member>
        <member name="M:AqlaSerializer.BclHelpers.GetUninitializedObject(System.Type)">
            <summary>
            Creates a new instance of the specified type, bypassing the constructor.
            </summary>
            <param name="type">The type to create</param>
            <returns>The new instance</returns>
            <exception cref="T:System.NotSupportedException">If the platform does not support constructor-skipping</exception>
        </member>
        <member name="M:AqlaSerializer.BclHelpers.WriteTimeSpan(System.TimeSpan,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a TimeSpan to a protobuf stream
            </summary>
        </member>
        <member name="M:AqlaSerializer.BclHelpers.ReadTimeSpan(AqlaSerializer.ProtoReader)">
            <summary>
            Parses a TimeSpan from a protobuf stream
            </summary>        
        </member>
        <member name="M:AqlaSerializer.BclHelpers.ReadDateTime(AqlaSerializer.ProtoReader)">
            <summary>
            Parses a DateTime from a protobuf stream
            </summary>
        </member>
        <member name="M:AqlaSerializer.BclHelpers.WriteDateTime(System.DateTime,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a DateTime to a protobuf stream, excluding the <c>Kind</c>
            </summary>
        </member>
        <member name="M:AqlaSerializer.BclHelpers.WriteDateTimeWithKind(System.DateTime,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a DateTime to a protobuf stream, including the <c>Kind</c>
            </summary>
        </member>
        <member name="M:AqlaSerializer.BclHelpers.ReadDecimal(AqlaSerializer.ProtoReader)">
            <summary>
            Parses a decimal from a protobuf stream
            </summary>
        </member>
        <member name="M:AqlaSerializer.BclHelpers.WriteDecimal(System.Decimal,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a decimal to a protobuf stream
            </summary>
        </member>
        <member name="M:AqlaSerializer.BclHelpers.WriteGuid(System.Guid,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a Guid to a protobuf stream
            </summary>        
        </member>
        <member name="M:AqlaSerializer.BclHelpers.ReadGuid(AqlaSerializer.ProtoReader)">
            <summary>
            Parses a Guid from a protobuf stream
            </summary>
        </member>
        <member name="T:AqlaSerializer.BclHelpers.NetObjectOptions">
            <summary>
            Optional behaviours that introduce .NET-specific functionality
            </summary>
        </member>
        <member name="F:AqlaSerializer.BclHelpers.NetObjectOptions.None">
            <summary>
            No special behaviour
            </summary>
        </member>
        <member name="F:AqlaSerializer.BclHelpers.NetObjectOptions.AsReference">
            <summary>
            Enables full object-tracking/full-graph support.
            </summary>
        </member>
        <member name="F:AqlaSerializer.BclHelpers.NetObjectOptions.DynamicType">
            <summary>
            Embeds the type information into the stream, allowing usage with types not known in advance.
            </summary>
        </member>
        <member name="F:AqlaSerializer.BclHelpers.NetObjectOptions.UseConstructor">
            <summary>
            If false, the constructor for the type is bypassed during deserialization, meaning any field initializers
            or other initialization code is skipped.
            </summary>
        </member>
        <member name="F:AqlaSerializer.BclHelpers.NetObjectOptions.LateSet">
            <summary>
            Should not expect serializer to call NoteObject: usable for serializers of primitive immutable reference types (e.g. String, System.Type) 
            </summary>
        </member>
        <member name="F:AqlaSerializer.BclHelpers.NetObjectOptions.WriteAsLateReference">
            <summary>
            Not recursive
            </summary>
        </member>
        <member name="T:AqlaSerializer.BinaryDataFormat">
            <summary>
            Sub-format to use when serializing/deserializing data
            </summary>
        </member>
        <member name="F:AqlaSerializer.BinaryDataFormat.Default">
            <summary>
            Uses the default encoding for the data-type.
            </summary>
        </member>
        <member name="F:AqlaSerializer.BinaryDataFormat.ZigZag">
            <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that zigzag variant encoding will be used. This means that values
            with small magnitude (regardless of sign) take a small amount
            of space to encode.
            </summary>
        </member>
        <member name="F:AqlaSerializer.BinaryDataFormat.TwosComplement">
            <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that two's-complement variant encoding will be used.
            This means that any -ve number will take 10 bytes (even for 32-bit),
            so should only be used for compatibility.
            </summary>
        </member>
        <member name="F:AqlaSerializer.BinaryDataFormat.FixedSize">
            <summary>
            When applied to signed integer-based data (including Decimal), this
            indicates that a fixed amount of space will be used.
            </summary>
        </member>
        <member name="F:AqlaSerializer.BinaryDataFormat.Group">
            <summary>
            When applied to a sub-message, indicates that the value should be treated
            as group-delimited.
            </summary>
        </member>
        <member name="T:AqlaSerializer.BufferExtension">
            <summary>
            Provides a simple buffer-based implementation of an <see cref="T:AqlaSerializer.IExtension">extension</see> object.
            </summary>
        </member>
        <member name="T:AqlaSerializer.Extensible">
            <summary>
            Simple base class for supporting unexpected fields allowing
            for loss-less round-tips/merge, even if the data is not understod.
            The additional fields are (by default) stored in-memory in a buffer.
            </summary>
            <remarks>As an example of an alternative implementation, you might
            choose to use the file system (temporary files) as the back-end, tracking
            only the paths [such an object would ideally be IDisposable and use
            a finalizer to ensure that the files are removed].</remarks>
            <seealso cref="T:AqlaSerializer.IExtensible"/>
        </member>
        <member name="M:AqlaSerializer.Extensible.GetExtensionObject(System.Boolean)">
            <summary>
            Retrieves the <see cref="T:AqlaSerializer.IExtension">extension</see> object for the current
            instance, optionally creating it if it does not already exist.
            </summary>
            <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
            <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
            <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
        </member>
        <member name="M:AqlaSerializer.Extensible.GetExtensionObject(AqlaSerializer.IExtension@,System.Boolean)">
            <summary>
            Provides a simple, default implementation for <see cref="T:AqlaSerializer.IExtension">extension</see> support,
            optionally creating it if it does not already exist. Designed to be called by
            classes implementing <see cref="T:AqlaSerializer.IExtensible"/>.
            </summary>
            <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
            <param name="extensionObject">The extension field to check (and possibly update).</param>
            <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
            <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
        </member>
        <member name="M:AqlaSerializer.Extensible.TryGetValue(AqlaSerializer.Meta.TypeModel,System.Type,AqlaSerializer.IExtensible,System.Int32,AqlaSerializer.BinaryDataFormat,System.Boolean,System.Object@)">
            <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            The value returned (in "value") is the composed value after merging any duplicated content;
            if the value is "repeated" (a list), then use GetValues instead.
            </summary>
            <param name="type">The data-type of the field.</param>
            <param name="model">The model to use for configuration.</param>
            <param name="value">The effective value of the field, or the default value if not found.</param>
            <param name="instance">The extensible object to obtain the value from.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <param name="format">The data-format to use when decoding the value.</param>
            <param name="allowDefinedTag">Allow tags that are present as part of the definition; for example, to query unknown enum values.</param>
            <returns>True if data for the field was present, false otherwise.</returns>
        </member>
        <member name="M:AqlaSerializer.Extensible.GetValues(AqlaSerializer.Meta.TypeModel,System.Type,AqlaSerializer.IExtensible,System.Int32,AqlaSerializer.BinaryDataFormat)">
            <summary>
            Queries an extensible object for an additional (unexpected) data-field for the instance.
            Each occurrence of the field is yielded separately, making this usage suitable for "repeated"
            (list) fields.
            </summary>
            <remarks>The extended data is processed lazily as the enumerator is iterated.</remarks>
            <param name="model">The model to use for configuration.</param>
            <param name="type">The data-type of the field.</param>
            <param name="instance">The extensible object to obtain the value from.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <param name="format">The data-format to use when decoding the value.</param>
            <returns>An enumerator that yields each occurrence of the field.</returns>
        </member>
        <member name="M:AqlaSerializer.Extensible.AppendValue(AqlaSerializer.Meta.TypeModel,AqlaSerializer.IExtensible,System.Int32,AqlaSerializer.BinaryDataFormat,System.Object)">
            <summary>
            Appends the value as an additional (unexpected) data-field for the instance.
            Note that for non-repeated sub-objects, this equates to a merge operation;
            for repeated sub-objects this adds a new instance to the set; for simple
            values the new value supercedes the old value.
            </summary>
            <remarks>Note that appending a value does not remove the old value from
            the stream; avoid repeatedly appending values for the same field.</remarks>
            <param name="model">The model to use for configuration.</param>
            <param name="format">The data-format to use when encoding the value.</param>
            <param name="instance">The extensible object to append the value to.</param>
            <param name="tag">The field identifier; the tag should not be defined as a known data-field for the instance.</param>
            <param name="value">The value to append.</param>
        </member>
        <member name="T:AqlaSerializer.ExtensibleUtil">
            <summary>
            This class acts as an internal wrapper allowing us to do a dynamic
            methodinfo invoke; an't put into Serializer as don't want on public
            API; can't put into Serializer&lt;T&gt; since we need to invoke
            accross classes, which isn't allowed in Silverlight)
            </summary>
        </member>
        <member name="M:AqlaSerializer.ExtensibleUtil.GetExtendedValues(AqlaSerializer.Meta.TypeModel,System.Type,AqlaSerializer.IExtensible,System.Int32,AqlaSerializer.BinaryDataFormat,System.Boolean,System.Boolean)">
            <summary>
            All this does is call GetExtendedValuesTyped with the correct type for "instance";
            this ensures that we don't get issues with subclasses declaring conflicting types -
            the caller must respect the fields defined for the type they pass in.
            </summary>
        </member>
        <member name="T:AqlaSerializer.Helpers">
            <summary>
            Not all frameworks are created equal (fx1.1 vs fx2.0,
            micro-framework, compact-framework,
            silverlight, etc). This class simply wraps up a few things that would
            otherwise make the real code unnecessarily messy, providing fallback
            implementations if necessary.
            </summary>
        </member>
        <member name="T:AqlaSerializer.ProtoTypeCode">
            <summary>
            Intended to be a direct map to regular TypeCode, but:
            - with missing types
            - existing on WinRT
            </summary>
        </member>
        <member name="T:AqlaSerializer.IExtensible">
            <summary>
            Indicates that the implementing type has support for protocol-buffer
            <see cref="T:AqlaSerializer.IExtension">extensions</see>.
            </summary>
            <remarks>Can be implemented by deriving from Extensible.</remarks>
        </member>
        <member name="M:AqlaSerializer.IExtensible.GetExtensionObject(System.Boolean)">
            <summary>
            Retrieves the <see cref="T:AqlaSerializer.IExtension">extension</see> object for the current
            instance, optionally creating it if it does not already exist.
            </summary>
            <param name="createIfMissing">Should a new extension object be
            created if it does not already exist?</param>
            <returns>The extension object if it exists (or was created), or null
            if the extension object does not exist or is not available.</returns>
            <remarks>The <c>createIfMissing</c> argument is false during serialization,
            and true during deserialization upon encountering unexpected fields.</remarks>
        </member>
        <member name="T:AqlaSerializer.IExtension">
            <summary>
            Provides addition capability for supporting unexpected fields during
            protocol-buffer serialization/deserialization. This allows for loss-less
            round-trip/merge, even when the data is not fully understood.
            </summary>
        </member>
        <member name="M:AqlaSerializer.IExtension.BeginAppend">
            <summary>
            Requests a stream into which any unexpected fields can be persisted.
            </summary>
            <returns>A new stream suitable for storing data.</returns>
        </member>
        <member name="M:AqlaSerializer.IExtension.EndAppend(System.IO.Stream,System.Boolean)">
            <summary>
            Indicates that all unexpected fields have now been stored. The
            implementing class is responsible for closing the stream. If
            "commit" is not true the data may be discarded.
            </summary>
            <param name="stream">The stream originally obtained by BeginAppend.</param>
            <param name="commit">True if the append operation completed successfully.</param>
        </member>
        <member name="M:AqlaSerializer.IExtension.BeginQuery">
            <summary>
            Requests a stream of the unexpected fields previously stored.
            </summary>
            <returns>A prepared stream of the unexpected fields.</returns>
        </member>
        <member name="M:AqlaSerializer.IExtension.EndQuery(System.IO.Stream)">
            <summary>
            Indicates that all unexpected fields have now been read. The
            implementing class is responsible for closing the stream.
            </summary>
            <param name="stream">The stream originally obtained by BeginQuery.</param>
        </member>
        <member name="M:AqlaSerializer.IExtension.GetLength">
            <summary>
            Requests the length of the raw binary stream; this is used
            when serializing sub-entities to indicate the expected size.
            </summary>
            <returns>The length of the binary stream representing unexpected data.</returns>
        </member>
        <member name="T:AqlaSerializer.ImplicitFieldsMode">
            <summary>
            Specifies the method used to infer field tags for members of the type
            under consideration. Tags are deduced using the invariant alphabetic
            sequence of the members' names; this makes implicit field tags very brittle,
            and susceptible to changes such as field names (normally an isolated
            change).
            </summary>
        </member>
        <member name="F:AqlaSerializer.ImplicitFieldsMode.None">
            <summary>
            No members are serialized implicitly; all members require a suitable
            attribute such as [ProtoMember]. This is the recmomended mode for
            most scenarios.
            </summary>
        </member>
        <member name="F:AqlaSerializer.ImplicitFieldsMode.PublicFieldsAndProperties">
            <summary>
            Public properties and fields are eligible for implicit serialization;
            this treats the public API as a contract. Ordering beings from ImplicitFirstTag.
            </summary>
        </member>
        <member name="F:AqlaSerializer.ImplicitFieldsMode.AllFields">
            <summary>
            Public and non-public fields are eligible for implicit serialization;
            this acts as a state/implementation serializer. Ordering beings from ImplicitFirstTag.
            </summary>
        </member>
        <member name="F:AqlaSerializer.ImplicitFieldsMode.AllProperties">
            <summary>
            Public and non-public properties are eligible for implicit serialization;
            this acts as a state/implementation serializer. Ordering beings from ImplicitFirstTag.
            </summary>
        </member>
        <member name="F:AqlaSerializer.ImplicitFieldsMode.AllFieldsAndProperties">
            <summary>
            Public and non-public properties are eligible for implicit serialization;
            this acts as a state/implementation serializer. Ordering beings from ImplicitFirstTag.
            </summary>
        </member>
        <member name="F:AqlaSerializer.ImplicitFieldsMode.PublicFields">
            <summary>
            Public fields are eligible for implicit serialization
            </summary>
        </member>
        <member name="F:AqlaSerializer.ImplicitFieldsMode.PublicProperties">
            <summary>
            Public properties are eligible for implicit serialization
            </summary>
        </member>
        <member name="M:AqlaSerializer.NetObjectHelpers.ReadNetObject_Start(System.Object@,AqlaSerializer.ProtoReader,System.Type@,AqlaSerializer.BclHelpers.NetObjectOptions,System.Int32@,System.Boolean)">
            <summary>
            Reads an *implementation specific* bundled .NET object, including (as options) type-metadata, identity/re-use, etc.
            </summary>
        </member>
        <member name="M:AqlaSerializer.NetObjectHelpers.WriteNetObject_Start(System.Object,AqlaSerializer.ProtoWriter,AqlaSerializer.BclHelpers.NetObjectOptions,System.Int32@,System.Boolean@)">
            <summary>
            Writes an *implementation specific* bundled .NET object, including (as options) type-metadata, identity/re-use, etc.
            </summary>
        </member>
        <member name="T:AqlaSerializer.PrefixStyle">
            <summary>
            Specifies the type of prefix that should be applied to messages.
            </summary>
        </member>
        <member name="F:AqlaSerializer.PrefixStyle.None">
            <summary>
            No length prefix is applied to the data; the data is terminated only be the end of the stream.
            </summary>
        </member>
        <member name="F:AqlaSerializer.PrefixStyle.Base128">
            <summary>
            A base-128 length prefix is applied to the data (efficient for short messages).
            </summary>
        </member>
        <member name="F:AqlaSerializer.PrefixStyle.Fixed32">
            <summary>
            A fixed-length (little-endian) length prefix is applied to the data (useful for compatibility).
            </summary>
        </member>
        <member name="F:AqlaSerializer.PrefixStyle.Fixed32BigEndian">
            <summary>
            A fixed-length (big-endian) length prefix is applied to the data (useful for compatibility).
            </summary>
        </member>
        <member name="T:AqlaSerializer.ProtoAggregateException">
            <summary>
            Indicates an error during serialization/deserialization of a proto stream.
            </summary>
        </member>
        <member name="T:AqlaSerializer.ProtoException">
            <summary>
            Indicates an error during serialization/deserialization of a proto stream.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoException.#ctor">
            <summary>Creates a new ProtoException instance.</summary>
        </member>
        <member name="M:AqlaSerializer.ProtoException.#ctor(System.String)">
            <summary>Creates a new ProtoException instance.</summary>
        </member>
        <member name="M:AqlaSerializer.ProtoException.#ctor(System.String,System.Exception)">
            <summary>Creates a new ProtoException instance.</summary>
        </member>
        <member name="T:AqlaSerializer.ProtoReader">
            <summary>
            A stateful reader, used to read a protobuf stream. Typical usage would be (sequentially) to call
            ReadFieldHeader and (after matching the field) an appropriate Read* method.
            </summary>
        </member>
        <member name="P:AqlaSerializer.ProtoReader.FieldNumber">
            <summary>
            Gets the number of the field being processed.
            </summary>
        </member>
        <member name="P:AqlaSerializer.ProtoReader.WireType">
            <summary>
            Indicates the underlying proto serialization format on the wire.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.#ctor(System.IO.Stream,AqlaSerializer.Meta.TypeModel,AqlaSerializer.SerializationContext)">
            <summary>
            Creates a new reader against a stream
            </summary>
            <param name="source">The source stream</param>
            <param name="model">The model to use for serialization; this can be null, but this will impair the ability to deserialize sub-objects</param>
            <param name="context">Additional context about this serialization operation</param>
        </member>
        <member name="P:AqlaSerializer.ProtoReader.InternStrings">
            <summary>
            Gets / sets a flag indicating whether strings should be checked for repetition; if
            true, any repeated UTF-8 byte sequence will result in the same String instance, rather
            than a second instance of the same string. Enabled by default. Note that this uses
            a <i>custom</i> interner - the system-wide string interner is not used.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.#ctor(System.IO.Stream,AqlaSerializer.Meta.TypeModel,AqlaSerializer.SerializationContext,System.Int32)">
            <summary>
            Creates a new reader against a stream
            </summary>
            <param name="source">The source stream</param>
            <param name="model">The model to use for serialization; this can be null, but this will impair the ability to deserialize sub-objects</param>
            <param name="context">Additional context about this serialization operation</param>
            <param name="length">The number of bytes to read, or -1 to read until the end of the stream</param>
        </member>
        <member name="P:AqlaSerializer.ProtoReader.Context">
            <summary>
            Addition information about this deserialization operation.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.Dispose">
            <summary>
            Releases resources used by the reader, but importantly <b>does not</b> Dispose the 
            underlying stream; in many typical use-cases the stream is used for different
            processes, so it is assumed that the consumer will Dispose their stream separately.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadUInt32">
            <summary>
            Reads an unsigned 32-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="P:AqlaSerializer.ProtoReader.Position">
            <summary>
            Returns the position of the current reader (note that this is not necessarily the same as the position
            in the underlying stream, if multiple readers are used on the same stream)
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadArrayContent``1(System.Int32,System.Func{``0})">
            <summary>
            Behavior same as <see cref="T:AqlaSerializer.Serializers.ListHelpers"/> with ProtoCompatibility = off (except max array size)
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadInt16">
            <summary>
            Reads a signed 16-bit integer from the stream: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadUInt16">
            <summary>
            Reads an unsigned 16-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadByte">
            <summary>
            Reads an unsigned 8-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadSByte">
            <summary>
            Reads a signed 8-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadInt32">
            <summary>
            Reads a signed 32-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadInt64">
            <summary>
            Reads a signed 64-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadString">
            <summary>
            Reads a string from the stream (using UTF8); supported wire-types: String
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ThrowEnumException(System.Type,System.Int32)">
            <summary>
            Throws an exception indication that the given value cannot be mapped to an enum.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadDouble">
            <summary>
            Reads a double-precision number from the stream; supported wire-types: Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadObject(System.Object,System.Int32,AqlaSerializer.ProtoReader)">
            <summary>
            Reads (merges) a sub-message from the stream, internally calling StartSubItem and EndSubItem, and (in between)
            parsing the message in accordance with the model associated with the reader
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.EndSubItem(AqlaSerializer.SubItemToken,AqlaSerializer.ProtoReader)">
            <summary>
            Makes the end of consuming a nested message in the stream; the stream must be either at the correct EndGroup
            marker, or all fields of the sub-message must have been consumed (in either case, this means ReadFieldHeader
            should return zero)
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.EndSubItem(AqlaSerializer.SubItemToken,System.Boolean,AqlaSerializer.ProtoReader)">
            <summary>
            Makes the end of consuming a nested message in the stream; the stream must be either at the correct EndGroup
            marker, or all fields of the sub-message must have been consumed (in either case, this means ReadFieldHeader
            should return zero)
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ExpectRoot(AqlaSerializer.ProtoReader)">
            <summary>
            Next StartSubItem call will be ignored unless ReadFieldHeader is called
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.StartSubItem(AqlaSerializer.ProtoReader)">
            <summary>
            Begins consuming a nested message in the stream; supported wire-types: StartGroup, String
            </summary>
            <remarks>The token returned must be help and used when callining EndSubItem</remarks>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadFieldHeader">
            <summary>
            Reads a field header from the stream, setting the wire-type and retuning the field number. If no
            more fields are available, then 0 is returned. This methods respects sub-messages.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.TryReadFieldHeader(System.Int32)">
            <summary>
            Looks ahead to see whether the next field in the stream is what we expect
            (typically; what we've just finished reading - for example ot read successive list items)
            </summary>
        </member>
        <member name="P:AqlaSerializer.ProtoReader.Model">
            <summary>
            Get the TypeModel associated with this reader
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.Hint(AqlaSerializer.WireType)">
            <summary>
            Compares the streams current wire-type to the hinted wire-type, updating the reader if necessary; for example,
            a Variant may be updated to SignedVariant. If the hinted wire-type is unrelated then no change is made.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.Assert(AqlaSerializer.WireType)">
            <summary>
            Verifies that the stream's current wire-type is as expected, or a specialized sub-type (for example,
            SignedVariant) - in which case the current wire-type is updated. Otherwise an exception is thrown.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.SkipField">
            <summary>
            Discards the data for the current field.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadUInt64">
            <summary>
            Reads an unsigned 64-bit integer from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadSingle">
            <summary>
            Reads a single-precision number from the stream; supported wire-types: Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadBoolean">
            <summary>
            Reads a boolean value from the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
            <returns></returns>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.AppendBytes(System.Byte[],AqlaSerializer.ProtoReader)">
            <summary>
            Reads a byte-sequence from the stream, appending them to an existing byte-sequence (which can be null); supported wire-types: String
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadLengthPrefix(System.IO.Stream,System.Boolean,AqlaSerializer.PrefixStyle,System.Int32@)">
            <summary>
            Reads the length-prefix of a message from a stream without buffering additional data, allowing a fixed-length
            reader to be created.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.DirectReadLittleEndianInt32(System.IO.Stream)">
            <summary>
            Reads a little-endian encoded integer. An exception is thrown if the data is not all available.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.DirectReadBigEndianInt32(System.IO.Stream)">
            <summary>
            Reads a big-endian encoded integer. An exception is thrown if the data is not all available.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.DirectReadVarintInt32(System.IO.Stream)">
            <summary>
            Reads a varint encoded integer. An exception is thrown if the data is not all available.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.DirectReadBytes(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a string (of a given lenth, in bytes) directly from the source into a pre-existing buffer. An exception is thrown if the data is not all available.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.DirectReadBytes(System.IO.Stream,System.Int32)">
            <summary>
            Reads a given number of bytes directly from the source. An exception is thrown if the data is not all available.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.DirectReadString(System.IO.Stream,System.Int32)">
            <summary>
            Reads a string (of a given lenth, in bytes) directly from the source. An exception is thrown if the data is not all available.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadLengthPrefix(System.IO.Stream,System.Boolean,AqlaSerializer.PrefixStyle,System.Int32@,System.Int32@)">
            <summary>
            Reads the length-prefix of a message from a stream without buffering additional data, allowing a fixed-length
            reader to be created.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.TryReadUInt32Variant(System.IO.Stream,System.UInt32@)">
            <returns>The number of bytes consumed; 0 if no data available</returns>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.AppendExtensionData(AqlaSerializer.IExtensible)">
            <summary>
            Copies the current field into the instance as extension data
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.HasSubValue(AqlaSerializer.WireType,AqlaSerializer.ProtoReader)">
            <summary>
            Indicates whether the reader still has data remaining in the current sub-item,
            additionally setting the wire-type for the next field if there is more data.
            This is used when decoding packed data.
            </summary>
        </member>
        <member name="F:AqlaSerializer.ProtoReader.GroupNumberForIgnoredFields">
            <summary>
            Field Number is not written for ignored fields but when group is ended the group number is written (equal to specified field number)
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.NoteObject(System.Object,AqlaSerializer.ProtoReader)">
            <summary>
            Utility method, not intended for public use; this helps maintain the root object is complex scenarios
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.NoteReservedTrappedObject(System.Int32,System.Object,AqlaSerializer.ProtoReader)">
            <summary>
            Utility method, not intended for public use; this helps maintain the root object is complex scenarios
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoReader.ReadType">
            <summary>
            Reads a Type from the stream, using the model's DynamicTypeFormatting if appropriate; supported wire-types: String
            </summary>
        </member>
        <member name="T:AqlaSerializer.ProtoWriter">
            <summary>
            Represents an output stream for writing protobuf data.
            
            Why is the API backwards (static methods with writer arguments)?
            See: http://marcgravell.blogspot.com/2010/03/last-will-be-first-and-first-will-be.html
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteObject(System.Object,System.Int32,System.Boolean,AqlaSerializer.ProtoWriter)">
            <summary>
            Write an encapsulated sub-object, using the supplied unique key (reprasenting a type).
            </summary>
            <param name="value">The object to write.</param>
            <param name="key">The key that uniquely identifies the type within the model.</param>
            <param name="prefixLength">See <see cref="T:System.String"/> (for true) and <see cref="F:AqlaSerializer.WireType.StartGroup"/> (for false)</param>
            <param name="writer">The destination.</param>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteRecursionSafeObject(System.Object,System.Int32,AqlaSerializer.ProtoWriter)">
            <summary>
            Write an encapsulated sub-object, using the supplied unique key (reprasenting a type) - but the
            caller is asserting that this relationship is non-recursive; no recursion check will be
            performed.
            </summary>
            <param name="value">The object to write.</param>
            <param name="key">The key that uniquely identifies the type within the model.</param>
            <param name="writer">The destination.</param>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.ExpectRoot(AqlaSerializer.ProtoWriter)">
            <summary>
            Next StartSubItem call will be ignored unless WriteFieldHeader is called
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteFieldHeaderBeginIgnored(AqlaSerializer.ProtoWriter)">
            <summary>
            Indicates that the next WriteFieldHeaderComplete call should be ignored
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteFieldHeaderBegin(System.Int32,AqlaSerializer.ProtoWriter)">
            <summary>
            Starts writing a field-header
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteFieldHeaderComplete(AqlaSerializer.WireType,AqlaSerializer.ProtoWriter)">
            <summary>
            Finished writing a field-header, indicating the format of the next data we plan to write.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteFieldHeaderCancelBegin(AqlaSerializer.ProtoWriter)">
            <summary>
            Cancels writing a field-header, initiated with WriteFieldHeaderBegin
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteFieldHeaderCompleteAnyType(AqlaSerializer.WireType,AqlaSerializer.ProtoWriter)">
            <summary>
            Finished writing a field-header, indicating the format of the next data we plan to write. Any type means nested objects are allowed.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteFieldHeaderIgnored(AqlaSerializer.WireType,AqlaSerializer.ProtoWriter)">
            <summary>
            Starts field header without writing it
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteFieldHeader(System.Int32,AqlaSerializer.WireType,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a field-header, indicating the format of the next data we plan to write.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteFieldHeaderAnyType(System.Int32,AqlaSerializer.WireType,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a field-header, indicating the format of the next data we plan to write. Any type means nested objects are allowed.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteBytes(System.Byte[],AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a byte-array to the stream; supported wire-types: String
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteBytes(System.Byte[],System.Int32,System.Int32,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a byte-array to the stream; supported wire-types: String
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.StartSubItem(System.Object,System.Boolean,AqlaSerializer.ProtoWriter)">
            <summary>
            Indicates the start of a nested record of specified type when fieldNumber has been written.
            </summary>
            <param name="instance">The instance to write.</param>
            <param name="prefixLength">See <see cref="T:System.String"/> (for true) and <see cref="F:AqlaSerializer.WireType.StartGroup"/> (for false)</param>
            <param name="writer">The destination.</param>
            <returns>A token representing the state of the stream; this token is given to EndSubItem.</returns>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.StartSubItemWithoutWritingHeader(System.Object,AqlaSerializer.ProtoWriter)">
            <summary>
            Indicates the start of a nested record of specified type when fieldNumber *AND* wireType has been written.
            </summary>
            <param name="instance">The instance to write.</param>
            <param name="writer">The destination.</param>
            <returns>A token representing the state of the stream; this token is given to EndSubItem.</returns>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.StartSubItem(System.Int32,System.Object,System.Boolean,AqlaSerializer.ProtoWriter)">
            <summary>
            Indicates the start of a nested record of specified type when fieldNumber has not been written before.
            </summary>
            <param name="fieldNumber"></param>
            <param name="instance">The instance to write.</param>
            <param name="prefixLength">See <see cref="T:System.String"/> (for true) and <see cref="F:AqlaSerializer.WireType.StartGroup"/> (for false)</param>
            <param name="writer">The destination.</param>
            <returns>A token representing the state of the stream; this token is given to EndSubItem.</returns>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.EndSubItem(AqlaSerializer.SubItemToken,AqlaSerializer.ProtoWriter)">
            <summary>
            Indicates the end of a nested record.
            </summary>
            <param name="token">The token obtained from StartubItem.</param>
            <param name="writer">The destination.</param>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.#ctor(System.IO.Stream,AqlaSerializer.Meta.TypeModel,AqlaSerializer.SerializationContext)">
            <summary>
            Creates a new writer against a stream
            </summary>
            <param name="dest">The destination stream</param>
            <param name="model">The model to use for serialization; this can be null, but this will impair the ability to serialize sub-objects</param>
            <param name="context">Additional context about this serialization operation</param>
        </member>
        <member name="P:AqlaSerializer.ProtoWriter.Context">
            <summary>
            Addition information about this serialization operation.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.Close">
            <summary>
            Flushes data to the underlying stream, and releases any resources. The underlying stream is *not* disposed
            by this operation.
            </summary>
        </member>
        <member name="P:AqlaSerializer.ProtoWriter.Model">
            <summary>
            Get the TypeModel associated with this writer
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.Flush(AqlaSerializer.ProtoWriter)">
            <summary>
            Writes any buffered data (if possible) to the underlying stream.
            </summary>
            <param name="writer">The writer to flush</param>
            <remarks>It is not always possible to fully flush, since some sequences
            may require values to be back-filled into the byte-stream.</remarks>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteUInt32Variant(System.UInt32,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes an unsigned 32-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteString(System.String,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a string to the stream; supported wire-types: String
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteUInt64(System.UInt64,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes an unsigned 64-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteInt64(System.Int64,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a signed 64-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteUInt32(System.UInt32,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes an unsigned 16-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteArrayContent``1(``0[],AqlaSerializer.WireType,System.Action{``0,AqlaSerializer.ProtoWriter},AqlaSerializer.ProtoWriter)">
            <summary>
            Behavior same as <see cref="T:AqlaSerializer.Serializers.ListHelpers"/> with ProtoCompatibility = off
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteInt16(System.Int16,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a signed 16-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteUInt16(System.UInt16,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes an unsigned 16-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteByte(System.Byte,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes an unsigned 8-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteSByte(System.SByte,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a signed 8-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteInt32(System.Int32,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a signed 32-bit integer to the stream; supported wire-types: Variant, Fixed32, Fixed64, SignedVariant
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteDouble(System.Double,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a double-precision number to the stream; supported wire-types: Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteSingle(System.Single,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a single-precision number to the stream; supported wire-types: Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.ThrowEnumException(AqlaSerializer.ProtoWriter,System.Object)">
            <summary>
            Throws an exception indicating that the given enum cannot be mapped to a serialized value.
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteBoolean(System.Boolean,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a boolean to the stream; supported wire-types: Variant, Fixed32, Fixed64
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.AppendExtensionData(AqlaSerializer.IExtensible,AqlaSerializer.ProtoWriter)">
            <summary>
            Copies any extension data stored for the instance to the underlying stream
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.SetRootObject(System.Object)">
            <summary>
            Specifies a known root object to use during reference-tracked serialization
            </summary>
        </member>
        <member name="M:AqlaSerializer.ProtoWriter.WriteType(System.Type,AqlaSerializer.ProtoWriter)">
            <summary>
            Writes a Type to the stream, using the model's DynamicTypeFormatting if appropriate; supported wire-types: String
            </summary>
        </member>
        <member name="T:AqlaSerializer.SerializationContext">
            <summary>
            Additional information about a serialization operation
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializationContext.Context">
            <summary>
            Gets or sets a user-defined object containing additional information about this serialization/deserialization operation.
            </summary>
        </member>
        <member name="P:AqlaSerializer.SerializationContext.Default">
            <summary>
            A default SerializationContext, with minimal information.
            </summary>
        </member>
        <member name="M:AqlaSerializer.SerializationContext.op_Implicit(AqlaSerializer.SerializationContext)~System.Runtime.Serialization.StreamingContext">
            <summary>
            Convert a SerializationContext to a StreamingContext
            </summary>
        </member>
        <member name="M:AqlaSerializer.SerializationContext.op_Implicit(System.Runtime.Serialization.StreamingContext)~AqlaSerializer.SerializationContext">
            <summary>
            Convert a StreamingContext to a SerializationContext
            </summary>
        </member>
        <member name="T:AqlaSerializer.Serializer">
            <summary>
            Provides protocol-buffer serialization capability for concrete, attributed types. This
            is a *default* model, but custom serializer models are also supported.
            </summary>
            <remarks>
            Protocol-buffer serialization is a compact binary format, designed to take
            advantage of sparse data and knowledge of specific data types; it is also
            extensible, allowing a type to be deserialized / merged even if some data is
            not recognised.
            </remarks>
        </member>
        <member name="F:AqlaSerializer.Serializer.ListItemTag">
            <summary>
            The field number that is used as a default when serializing/deserializing a list of objects.
            The data is treated as repeated message with field number 1.
            </summary>
        </member>
        <member name="T:AqlaSerializer.Serializer.TypeResolver">
            <summary>
            Maps a field-number to a type
            </summary>
        </member>
        <member name="M:AqlaSerializer.Serializer.FlushPool">
            <summary>
            Releases any internal buffers that have been reserved for efficiency; this does not affect any serialization
            operations; simply: it can be used (optionally) to release the buffers for garbage collection (at the expense
            of having to re-allocate a new buffer for the next operation, rather than re-use prior buffers).
            </summary>
        </member>
        <member name="T:AqlaSerializer.SubItemToken">
            <summary>
            Used to hold particulars relating to nested objects. This is opaque to the caller - simply
            give back the token you are given at the end of an object.
            </summary>
        </member>
        <member name="T:AqlaSerializer.WireType">
            <summary>
            Indicates the encoding used to represent an individual value in a protobuf stream
            </summary>
        </member>
        <member name="F:AqlaSerializer.WireType.None">
            <summary>
            Represents an error condition
            </summary>
        </member>
        <member name="F:AqlaSerializer.WireType.Variant">
            <summary>
            Base-128 variant-length encoding
            </summary>
        </member>
        <member name="F:AqlaSerializer.WireType.Fixed64">
            <summary>
            Fixed-length 8-byte encoding
            </summary>
        </member>
        <member name="F:AqlaSerializer.WireType.String">
            <summary>
            Length-variant-prefixed encoding (may be used for nested or root object to add length prefix)
            </summary>
        </member>
        <member name="F:AqlaSerializer.WireType.StartGroup">
            <summary>
            Indicates the start of a group (nested object without length prefix but stream rewriting required; use it for small "wrappers" around real objects to minimize data movement in stream)
            </summary>
        </member>
        <member name="F:AqlaSerializer.WireType.EndGroup">
            <summary>
            Indicates the end of a group
            </summary>
        </member>
        <member name="F:AqlaSerializer.WireType.Fixed32">
            <summary>
            Fixed-length 4-byte encoding, may be used as root length prefix but not for nested objects
            </summary>10
        </member>
        <member name="F:AqlaSerializer.WireType.SignedVariant">
            <summary>
            This is not a formal wire-type in the "protocol buffers" spec, but
            denotes a variant integer that should be interpreted using
            zig-zag semantics (so -ve numbers aren't a significant overhead)
            </summary>
        </member>
        <member name="F:AqlaSerializer.WireType.Null">
            <summary>
            No field content expected
            </summary>
        </member>
    </members>
</doc>
